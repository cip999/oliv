# Generated from IOLexer.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,312,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,
        5,13,184,8,13,10,13,12,13,187,9,13,1,14,1,14,1,14,1,15,1,15,3,15,
        194,8,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,208,8,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,
        1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,31,1,31,1,32,3,32,239,8,32,1,32,1,32,1,32,
        5,32,244,8,32,10,32,12,32,247,9,32,3,32,249,8,32,1,33,1,33,5,33,
        253,8,33,10,33,12,33,256,9,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,
        1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,
        1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
        1,46,5,46,292,8,46,10,46,12,46,295,9,46,1,46,1,46,1,47,1,47,1,47,
        1,47,5,47,303,8,47,10,47,12,47,306,9,47,1,47,1,47,1,47,1,47,1,47,
        2,254,304,0,48,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,
        44,89,45,91,46,93,47,95,48,1,0,4,2,0,65,90,97,122,3,0,48,57,65,90,
        97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,324,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,
        0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,
        0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,
        0,0,0,0,95,1,0,0,0,1,97,1,0,0,0,3,104,1,0,0,0,5,108,1,0,0,0,7,113,
        1,0,0,0,9,120,1,0,0,0,11,129,1,0,0,0,13,135,1,0,0,0,15,140,1,0,0,
        0,17,146,1,0,0,0,19,152,1,0,0,0,21,162,1,0,0,0,23,167,1,0,0,0,25,
        177,1,0,0,0,27,181,1,0,0,0,29,188,1,0,0,0,31,193,1,0,0,0,33,195,
        1,0,0,0,35,197,1,0,0,0,37,199,1,0,0,0,39,207,1,0,0,0,41,209,1,0,
        0,0,43,212,1,0,0,0,45,215,1,0,0,0,47,217,1,0,0,0,49,220,1,0,0,0,
        51,222,1,0,0,0,53,225,1,0,0,0,55,227,1,0,0,0,57,229,1,0,0,0,59,231,
        1,0,0,0,61,233,1,0,0,0,63,235,1,0,0,0,65,238,1,0,0,0,67,250,1,0,
        0,0,69,259,1,0,0,0,71,261,1,0,0,0,73,263,1,0,0,0,75,265,1,0,0,0,
        77,267,1,0,0,0,79,269,1,0,0,0,81,271,1,0,0,0,83,273,1,0,0,0,85,275,
        1,0,0,0,87,277,1,0,0,0,89,280,1,0,0,0,91,283,1,0,0,0,93,287,1,0,
        0,0,95,298,1,0,0,0,97,98,5,115,0,0,98,99,5,111,0,0,99,100,5,114,
        0,0,100,101,5,116,0,0,101,102,5,101,0,0,102,103,5,100,0,0,103,2,
        1,0,0,0,104,105,5,97,0,0,105,106,5,115,0,0,106,107,5,99,0,0,107,
        4,1,0,0,0,108,109,5,100,0,0,109,110,5,101,0,0,110,111,5,115,0,0,
        111,112,5,99,0,0,112,6,1,0,0,0,113,114,5,115,0,0,114,115,5,116,0,
        0,115,116,5,114,0,0,116,117,5,105,0,0,117,118,5,99,0,0,118,119,5,
        116,0,0,119,8,1,0,0,0,120,121,5,100,0,0,121,122,5,105,0,0,122,123,
        5,115,0,0,123,124,5,116,0,0,124,125,5,105,0,0,125,126,5,110,0,0,
        126,127,5,99,0,0,127,128,5,116,0,0,128,10,1,0,0,0,129,130,5,103,
        0,0,130,131,5,114,0,0,131,132,5,97,0,0,132,133,5,112,0,0,133,134,
        5,104,0,0,134,12,1,0,0,0,135,136,5,116,0,0,136,137,5,114,0,0,137,
        138,5,101,0,0,138,139,5,101,0,0,139,14,1,0,0,0,140,141,5,110,0,0,
        141,142,5,111,0,0,142,143,5,100,0,0,143,144,5,101,0,0,144,145,5,
        115,0,0,145,16,1,0,0,0,146,147,5,101,0,0,147,148,5,100,0,0,148,149,
        5,103,0,0,149,150,5,101,0,0,150,151,5,115,0,0,151,18,1,0,0,0,152,
        153,5,99,0,0,153,154,5,111,0,0,154,155,5,110,0,0,155,156,5,110,0,
        0,156,157,5,101,0,0,157,158,5,99,0,0,158,159,5,116,0,0,159,160,5,
        101,0,0,160,161,5,100,0,0,161,20,1,0,0,0,162,163,5,108,0,0,163,164,
        5,105,0,0,164,165,5,110,0,0,165,166,5,101,0,0,166,22,1,0,0,0,167,
        168,5,98,0,0,168,169,5,105,0,0,169,170,5,112,0,0,170,171,5,97,0,
        0,171,172,5,114,0,0,172,173,5,116,0,0,173,174,5,105,0,0,174,175,
        5,116,0,0,175,176,5,101,0,0,176,24,1,0,0,0,177,178,5,100,0,0,178,
        179,5,97,0,0,179,180,5,103,0,0,180,26,1,0,0,0,181,185,7,0,0,0,182,
        184,7,1,0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,
        186,1,0,0,0,186,28,1,0,0,0,187,185,1,0,0,0,188,189,5,45,0,0,189,
        190,5,62,0,0,190,30,1,0,0,0,191,194,3,35,17,0,192,194,3,37,18,0,
        193,191,1,0,0,0,193,192,1,0,0,0,194,32,1,0,0,0,195,196,5,126,0,0,
        196,34,1,0,0,0,197,198,5,38,0,0,198,36,1,0,0,0,199,200,5,124,0,0,
        200,38,1,0,0,0,201,208,3,41,20,0,202,208,3,43,21,0,203,208,3,45,
        22,0,204,208,3,47,23,0,205,208,3,49,24,0,206,208,3,51,25,0,207,201,
        1,0,0,0,207,202,1,0,0,0,207,203,1,0,0,0,207,204,1,0,0,0,207,205,
        1,0,0,0,207,206,1,0,0,0,208,40,1,0,0,0,209,210,5,61,0,0,210,211,
        5,61,0,0,211,42,1,0,0,0,212,213,5,33,0,0,213,214,5,61,0,0,214,44,
        1,0,0,0,215,216,5,60,0,0,216,46,1,0,0,0,217,218,5,60,0,0,218,219,
        5,61,0,0,219,48,1,0,0,0,220,221,5,62,0,0,221,50,1,0,0,0,222,223,
        5,62,0,0,223,224,5,61,0,0,224,52,1,0,0,0,225,226,5,43,0,0,226,54,
        1,0,0,0,227,228,5,45,0,0,228,56,1,0,0,0,229,230,5,42,0,0,230,58,
        1,0,0,0,231,232,5,47,0,0,232,60,1,0,0,0,233,234,5,37,0,0,234,62,
        1,0,0,0,235,236,5,61,0,0,236,64,1,0,0,0,237,239,5,45,0,0,238,237,
        1,0,0,0,238,239,1,0,0,0,239,248,1,0,0,0,240,249,5,48,0,0,241,245,
        2,49,57,0,242,244,2,48,57,0,243,242,1,0,0,0,244,247,1,0,0,0,245,
        243,1,0,0,0,245,246,1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,248,
        240,1,0,0,0,248,241,1,0,0,0,249,66,1,0,0,0,250,254,5,34,0,0,251,
        253,8,2,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,255,1,0,0,0,254,
        252,1,0,0,0,255,257,1,0,0,0,256,254,1,0,0,0,257,258,5,34,0,0,258,
        68,1,0,0,0,259,260,5,40,0,0,260,70,1,0,0,0,261,262,5,41,0,0,262,
        72,1,0,0,0,263,264,5,91,0,0,264,74,1,0,0,0,265,266,5,93,0,0,266,
        76,1,0,0,0,267,268,5,123,0,0,268,78,1,0,0,0,269,270,5,125,0,0,270,
        80,1,0,0,0,271,272,5,44,0,0,272,82,1,0,0,0,273,274,5,58,0,0,274,
        84,1,0,0,0,275,276,5,95,0,0,276,86,1,0,0,0,277,278,5,46,0,0,278,
        279,5,46,0,0,279,88,1,0,0,0,280,281,5,92,0,0,281,282,5,110,0,0,282,
        90,1,0,0,0,283,284,7,3,0,0,284,285,1,0,0,0,285,286,6,45,0,0,286,
        92,1,0,0,0,287,288,5,47,0,0,288,289,5,47,0,0,289,293,1,0,0,0,290,
        292,8,2,0,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,
        294,1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,297,6,46,0,0,297,
        94,1,0,0,0,298,299,5,47,0,0,299,300,5,42,0,0,300,304,1,0,0,0,301,
        303,9,0,0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,305,1,0,0,0,304,
        302,1,0,0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,42,0,0,308,
        309,5,47,0,0,309,310,1,0,0,0,310,311,6,47,0,0,311,96,1,0,0,0,10,
        0,185,193,207,238,245,248,254,293,304,1,6,0,0
    ]

class IOLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    SORTED = 1
    ASC = 2
    DESC = 3
    STRICT = 4
    DISTINCT = 5
    GRAPH = 6
    TREE = 7
    NODES = 8
    EDGES = 9
    CONNECTED = 10
    LINE = 11
    BIPARTITE = 12
    DAG = 13
    IDENT = 14
    ARROW = 15
    BOOL_BIN_OP = 16
    NOT = 17
    AND = 18
    OR = 19
    COMP_OP = 20
    EQ = 21
    NOT_EQ = 22
    LT = 23
    LTE = 24
    GT = 25
    GTE = 26
    PLUS = 27
    MINUS = 28
    MULT = 29
    DIV = 30
    MOD = 31
    ASSIGN = 32
    INT = 33
    STR = 34
    LPAREN = 35
    RPAREN = 36
    LBRACK = 37
    RBRACK = 38
    LBRACE = 39
    RBRACE = 40
    COMMA = 41
    COLUMN = 42
    UNDERSCORE = 43
    DOTS = 44
    NL = 45
    WS = 46
    INLINE_COMMENT = 47
    BLOCK_COMMENT = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'sorted'", "'asc'", "'desc'", "'strict'", "'distinct'", "'graph'", 
            "'tree'", "'nodes'", "'edges'", "'connected'", "'line'", "'bipartite'", 
            "'dag'", "'->'", "'~'", "'&'", "'|'", "'=='", "'!='", "'<'", 
            "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "','", "':'", "'_'", 
            "'..'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "SORTED", "ASC", "DESC", "STRICT", "DISTINCT", "GRAPH", "TREE", 
            "NODES", "EDGES", "CONNECTED", "LINE", "BIPARTITE", "DAG", "IDENT", 
            "ARROW", "BOOL_BIN_OP", "NOT", "AND", "OR", "COMP_OP", "EQ", 
            "NOT_EQ", "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "MULT", 
            "DIV", "MOD", "ASSIGN", "INT", "STR", "LPAREN", "RPAREN", "LBRACK", 
            "RBRACK", "LBRACE", "RBRACE", "COMMA", "COLUMN", "UNDERSCORE", 
            "DOTS", "NL", "WS", "INLINE_COMMENT", "BLOCK_COMMENT" ]

    ruleNames = [ "SORTED", "ASC", "DESC", "STRICT", "DISTINCT", "GRAPH", 
                  "TREE", "NODES", "EDGES", "CONNECTED", "LINE", "BIPARTITE", 
                  "DAG", "IDENT", "ARROW", "BOOL_BIN_OP", "NOT", "AND", 
                  "OR", "COMP_OP", "EQ", "NOT_EQ", "LT", "LTE", "GT", "GTE", 
                  "PLUS", "MINUS", "MULT", "DIV", "MOD", "ASSIGN", "INT", 
                  "STR", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", 
                  "RBRACE", "COMMA", "COLUMN", "UNDERSCORE", "DOTS", "NL", 
                  "WS", "INLINE_COMMENT", "BLOCK_COMMENT" ]

    grammarFileName = "IOLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


